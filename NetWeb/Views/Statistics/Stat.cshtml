@using System.Linq;
@*@model List<WCFReportLib.Model.SimpleResultObject>*@

@{
    ViewBag.Title = "Stat";
    Layout = "~/Views/Shared/_myLayout.cshtml";
    ViewData["Title"] = "Pie Chart";
}


@Styles.Render("~/Content/css")

@Scripts.Render("~/bundles/modernizr")
@Scripts.Render("~/Content/custom/")


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Statistics</title>
</head>
<body>
    <div id="statisticsDiv" class="statDiv">
        <canvas id="chart"></canvas>
    </div>
</body>
</html>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="~/Scripts/Util.js"></script>
<script type="text/javascript">

    var MyChart;
    var MyChartData = {};

    var ChartOptions = {

        title: {
            display: true,
            text: 'Chart.js Bar Chart - Stacked'
        },
        tooltips: {
            mode: 'index',
            intersect: false
        },
        responsive: true,
        scales: {
            xAxes: [{
                stacked: true,
            }],
            yAxes: [{
                stacked: true
            }]
        }

    }

    MychartColors = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(231,233,237)'
    };

    var Colors = [];

    function DrawMyStacked(dataSets) {

        resetCanvas();

        var myDateLabels = [];


        var myValues = [];
        var myEventLabels = [];

        for (var n = 0; n <= dataSets.length - 1; n++) {

            var myObject = dataSets[n];

            for (var p = 0; p <= myObject.length - 1; p++) {

                if (myDateLabels.indexOf(myObject[p].EventTime) == -1) {
                    myDateLabels.push(myObject[p].EventTime);
                }

                if ($.inArray(myObject[p].EventTypeDescription.trim(), myEventLabels) === -1) {
                    myEventLabels.push(myObject[p].EventTypeDescription.trim());
                }

                var eventData = {
                    EventTime: myObject[p].EventTime,
                    EventTypeDescription: myObject[p].EventTypeDescription.trim(),
                    Number: myObject[p].Number
                };


                myValues.push(eventData);
            }
        }

        var chartData = {
            labels: myDateLabels,
            datasets: []
        };

        var myChart = new Chart(ctx, {
            options: ChartOptions,
            data: chartData,
            type: 'bar'
        });

        ////Create initial chart, all values same
        for (var xp = 0; xp < myEventLabels.length; xp++) {
            var newDataset = {
                label: myEventLabels[xp],
                backgroundColor: getRandomColor(),
                borderColor: getRandomColor(),
                data: [],
                fill: false
            };

            for (var index = 0; index < myChart.data.labels.length; ++index) {
                newDataset.data.push(0);
            }

            myChart.data.datasets.push(newDataset);
            myChart.update();
        }

        //Now, fix the values to correct values.
        //Uppdatera...?
        for (var stapel = 0; stapel < myChart.data.labels.length; stapel++) {

            var eventDate = myChart.data.labels[stapel];

            for (var p = 0; p < myChart.data.datasets.length; p++) { //Loopa igenom alla klossar för varje stapel! //myChart.data.datasets[KLOSS].data[STAPEL] = 1;

                var eventLabel = myChart.data.datasets[p].label;
                
                //Find that label in myValues array.

                for (var z = 0; z < myValues.length; z++) {

                    var d = myValues[z];
                    if (d.EventTime === eventDate && d.EventTypeDescription === eventLabel) {
                        myChart.data.datasets[p].data[stapel] = d.Number;
                        myChart.update();
                    }

                }

            }
        }

    }

    function addData3(myBarChart, ChartLabels, inDataSets) {

        var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');

        var myValues = [];
        var myLables = [];

        if (myBarChart === undefined) {
            MyChartData = {
                labels: ChartLabels,
                datasets: []
            };
        }

        for (var n = 0; n <= inDataSets.length - 1; n++) {

            for (var x = 0; x < inDataSets[n].length; x++) {
                myValues.push(inDataSets[n][x].Number);
                myLables.push(inDataSets[n][x].EventTypeDescription.trim());
            }

            var colorValue = getRandomColor();

            var newDataset = {
                label: myLables,
                backgroundColor: [colorValue],
                borderColor: [colorValue],
                borderWidth: 1,
                data: myValues
            };

            MyChartData.datasets.push(newDataset);
        }


        //for (var n = 0; n <= inDataSets.length - 1; n++) {

        //    var myObject = inDataSets[n];
        //    var myLoopValues = [];
        //    var myLabel = [];

        //    for (var p = 0; p <= myObject.length - 1; p++) {

        //        for (var x = 0; x < inDataSets.length; x++) {
        //            myLoopValues.push(inDataSets[x][p].Number);
        //            myLabel.push(inDataSets[x][p].EventTypeDescription.trim());
        //        }

        //        //myLoopValues.push(inDataSets[n][p].Number);
        //        //myLabel.push(inDataSets[n][p].EventTypeDescription.trim());

        //        var colorValue = getRandomColor();

        //        var newDataset = {
        //            label: myLabel,
        //            backgroundColor: [colorValue],
        //            borderColor: [colorValue],
        //            borderWidth: 1,
        //            data: myLoopValues
        //        };

        //        myLabel = [];
        //        myLoopValues = [];


        //        MyChartData.datasets.push(newDataset);


        //    }
        //}

        myBarChart = new Chart(ctx, {
            data: MyChartData,
            options: ChartOptions,
            type: 'bar'
        });


        //myBarChart.update(0);




    }

    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }



    function addData(chart, label, data) {
        chart.data.labels.push(label);
        chart.data.datasets.forEach((dataset) => {
            dataset.data.push(data);
        });
        chart.update();
    }


    function DrawStacked() {

        resetCanvas();

        var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');

        var myLabels = [];
        var myValues = [];


        var data = {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
            datasets: [{
                label: 'Dataset 1',
                backgroundColor: window.chartColors.red,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ]
            }, {
                label: 'Dataset 2',
                backgroundColor: window.chartColors.blue,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ]
            }, {
                label: 'Dataset 3',
                backgroundColor: window.chartColors.green,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ]
            }]

        };

        var newOptions = {

            title: {
                display: true,
                text: 'Chart.js Bar Chart - Stacked'
            },
            tooltips: {
                mode: 'index',
                intersect: false
            },
            responsive: true,
            scales: {
                xAxes: [{
                    stacked: true,
                }],
                yAxes: [{
                    stacked: true
                }]
            }

        }

        var options = {
            title: {
                display: true,
                text: 'Antal händelser.'
            },
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: true,
                        color: "rgba(255,99,164,0.2)"
                    }
                }],
                xAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: false
                    }
                }]
            }
        };

        var myChart = new Chart(ctx, {
            options: newOptions,
            data: data,
            type: 'bar'

        });
    }

    /*
     * Working example...
    */
    function DrawFixedDates() {

        resetCanvas();

        var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');

        var myLabels = [];
        var myValues = [];
        var myLabels = ["Stop Reason 2", "Daily", "FP Reason 3", "None", "FP Reason 2"];

        var chartData = {
            labels: ['2018-11-01', '2018-11-02', '2018-11-03'],
            datasets: []
        };



        var newOptions = {

            title: {
                display: true,
                text: 'Chart.js Bar Chart - Stacked'
            },
            tooltips: {
                mode: 'index',
                intersect: false
            },
            responsive: true,
            scales: {
                xAxes: [{
                    stacked: true,
                }],
                yAxes: [{
                    stacked: true
                }]
            }

        }

        var options = {
            title: {
                display: true,
                text: 'Antal händelser.'
            },
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: true,
                        color: "rgba(255,99,164,0.2)"
                    }
                }],
                xAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: false
                    }
                }]
            }
        };

        var myChart = new Chart(ctx, {
            options: newOptions,
            data: chartData,
            type: 'bar'

        });

        for (var xp = 0; xp < myLabels.length; xp++) {

            var newDataset = {
                label: myLabels[xp],
                backgroundColor: getRandomColor(),
                borderColor: getRandomColor(),
                data: [],
                fill: false
            };

            for (var index = 0; index < myChart.data.labels.length; ++index) {
                newDataset.data.push(2);
            }

            myChart.data.datasets.push(newDataset);
            myChart.update();
        }

        //Uppdatera...?
        //myChart.data.datasets[0].data[0] = 0;
        //myChart.update();

        //myChart.data.datasets[1].data[0] = 0;
        //myChart.update();

        //myChart.data.datasets[KLOSS].data[STAPEL] = 1;

        myChart.data.datasets[3].data[2] = 1;
        myChart.update();

        //myChart.data.datasets[2].data[1] = 0;
        //myChart.update();

        //var ps = ";";

    }

    function DrawChart(SimpleResultObject, typeOfChart) {

        resetCanvas();

        var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');

        var myLabels = [];
        var myValues = [];

        $.each(SimpleResultObject, function (i, item) {
            $(myLabels.push(item.Text))
            $(myValues.push(item.myValue))
        });

        var data = {
            labels: myLabels,
            datasets: [{
                label: "Sammanställning",
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 0, 0)',
                    'rgba(0, 255, 0)',
                    'rgba(0, 0, 255)',
                    'rgba(192, 192, 192)',
                    'rgba(255, 255, 0)',
                    'rgba(255, 0, 255)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(255, 0, 0)',
                    'rgba(0, 255, 0)',
                    'rgba(0, 0, 255)',
                    'rgba(192, 192, 192)',
                    'rgba(255, 255, 0)',
                    'rgba(255, 0, 255)'
                ],
                borderWidth: 1,
                data: myValues
            }]
        };

        var options = {
            title: {
                display: true,
                text: 'Antal händelser.'
            },
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: true,
                        color: "rgba(255,99,164,0.2)"
                    }
                }],
                xAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: false
                    }
                }]
            }
        };

        var myChart = new Chart(ctx, {
            options: options,
            data: data,
            type: typeOfChart.toLowerCase()

        });


    }


    var resetCanvas = function () {
        $('#chart').remove(); // this is my <canvas> element
        $('#statisticsDiv').append('<canvas id="chart"><canvas>');
        canvas = document.querySelector('#chart');
        ctx = canvas.getContext('2d');
        ctx.canvas.width = $('#graph').width(); // resize to parent width
        ctx.canvas.height = $('#graph').height(); // resize to parent height
        var x = canvas.width / 2;
        var y = canvas.height / 2;
        ctx.font = '10pt Verdana';
        ctx.textAlign = 'center';
        ctx.fillText('This text is centered on the canvas', x, y);
    };


</script>



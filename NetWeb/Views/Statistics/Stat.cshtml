@using System.Linq;
@*@model List<WCFReportLib.Model.SimpleResultObject>*@

@{
    ViewBag.Title = "Stat";
    Layout = "~/Views/Shared/_myLayout.cshtml";
    ViewData["Title"] = "Pie Chart";
}


@Styles.Render("~/Content/css")

@Scripts.Render("~/bundles/modernizr")
@Scripts.Render("~/Content/custom/")


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Statistics</title>
</head>
<body>
    <div id="statisticsDiv" class="statDiv">
        <canvas id="chart"></canvas>
    </div>
</body>
</html>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="~/Scripts/Util.js"></script>
<script type="text/javascript">

    var MyChart;
    var MyChartData = {};

    var ChartOptions= {

        title: {
            display: true,
            text: 'Chart.js Bar Chart - Stacked'
        },
        tooltips: {
            mode: 'index',
            intersect: false
        },
        responsive: true,
        scales: {
            xAxes: [{
                stacked: true,
            }],
            yAxes: [{
                stacked: true
            }]
        }

    }

    window.chartColors = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(231,233,237)'
    };

    function DrawMyStacked(dataSets) {

        resetCanvas();

        

        var myDateLabels = [];

        var myValues = [];
        var myEventLabels = [];

        var mydataArray = new Array(3);

        for (var n = 0; n <= dataSets.length - 1; n++) {

            var myObject = dataSets[n];

            for (var p = 0; p <= myObject.length - 1; p++) {

                if (myDateLabels.indexOf(myObject[p].EventTime) == -1) {
                    myDateLabels.push(myObject[p].EventTime);
                }

                //mydataArray.push(myObject[p].EventTime, myObject[p].EventTypeDescription.trim(), myObject[p].Number)

                myValues.push(myObject[p].Number);
                myEventLabels.push(myObject[p].EventTypeDescription.trim());

            }
        }

        var data = {
            labels: myDateLabels,
            datasets: [{
                label: "Sammanställning",
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 0, 0)',
                    'rgba(0, 255, 0)',
                    'rgba(0, 0, 255)',
                    'rgba(192, 192, 192)',
                    'rgba(255, 255, 0)',
                    'rgba(255, 0, 255)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(255, 0, 0)',
                    'rgba(0, 255, 0)',
                    'rgba(0, 0, 255)',
                    'rgba(192, 192, 192)',
                    'rgba(255, 255, 0)',
                    'rgba(255, 0, 255)'
                ],
                borderWidth: 1,
                data: []
            }]
        };

        var testValues = [];
        testValues.push(Math.random() * 10);
        testValues.push(Math.random() * 10);
        testValues.push(Math.random() * 10);

        MyChart = addData2(MyChart, "kalle", testValues)
    }

    function addData2(myBarChart, label, myValues) {

        var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');
        

        if (myBarChart === undefined) {

            MyChartData = {
                labels: ['label1','label2'],
                datasets: [{
                    label: "Sammanställning",
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)',
                        'rgba(255, 0, 0)',
                        'rgba(0, 255, 0)',
                        'rgba(0, 0, 255)',
                        'rgba(192, 192, 192)',
                        'rgba(255, 255, 0)',
                        'rgba(255, 0, 255)'
                    ],
                    borderColor: [
                        'rgba(255,99,132,1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(255, 0, 0)',
                        'rgba(0, 255, 0)',
                        'rgba(0, 0, 255)',
                        'rgba(192, 192, 192)',
                        'rgba(255, 255, 0)',
                        'rgba(255, 0, 255)'
                    ],
                    borderWidth: 1,
                    data: myValues
                }]
            };
            
            myBarChart = new Chart(ctx, {
                label: label,
                data: MyChartData,
                options: ChartOptions,
                type: 'bar'
            });

        } else {

            var newDataset = {
                label: "new-dataset",
                backgroundColor: 'rgba(99, 255, 132, 0.2)',
                borderColor: 'rgba(99, 255, 132, 1)',
                borderWidth: 1,
                data: myValues
            };

            MyChartData.datasets.push(newDataset);

            myBarChart.update();

        }

        return MyChartData;
    }

   

    function addData(chart, label, data) {
        chart.data.labels.push(label);
        chart.data.datasets.forEach((dataset) => {
            dataset.data.push(data);
        });
        chart.update();
    }


    function DrawStacked() {

        resetCanvas();

        var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');

        var myLabels = [];
        var myValues = [];


        var data = {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
            datasets: [{
                label: 'Dataset 1',
                backgroundColor: window.chartColors.red,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ]
            }, {
                label: 'Dataset 2',
                backgroundColor: window.chartColors.blue,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ]
            }, {
                label: 'Dataset 3',
                backgroundColor: window.chartColors.green,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ]
            }]

        };

        var newOptions = {
            
                title: {
                    display: true,
                    text: 'Chart.js Bar Chart - Stacked'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false
                },
                responsive: true,
                scales: {
                    xAxes: [{
                        stacked: true,
                    }],
                    yAxes: [{
                        stacked: true
                    }]
                }
            
        }

        var options = {
            title: {
                display: true,
                text: 'Antal händelser.'
            },
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: true,
                        color: "rgba(255,99,164,0.2)"
                    }
                }],
                xAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: false
                    }
                }]
            }
        };

        var myChart = new Chart(ctx, {
            options: newOptions,
            data: data,
            type: 'bar'

        });
    }

    function DrawChart(SimpleResultObject, typeOfChart) {

        resetCanvas();

        var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');

        var myLabels = [];
        var myValues = [];

        $.each(SimpleResultObject, function (i, item) {
            $(myLabels.push(item.Text))
            $(myValues.push(item.myValue))
        });

        var data = {
            labels: myLabels,
            datasets: [{
                label: "Sammanställning",
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 0, 0)',
                    'rgba(0, 255, 0)',
                    'rgba(0, 0, 255)',
                    'rgba(192, 192, 192)',
                    'rgba(255, 255, 0)',
                    'rgba(255, 0, 255)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(255, 0, 0)',
                    'rgba(0, 255, 0)',
                    'rgba(0, 0, 255)',
                    'rgba(192, 192, 192)',
                    'rgba(255, 255, 0)',
                    'rgba(255, 0, 255)'
                ],
                borderWidth: 1,
                data: myValues
            }]
        };

        var options = {
            title: {
                display: true,
                text:'Antal händelser.'
            },
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: true,
                        color: "rgba(255,99,164,0.2)"
                    }
                }],
                xAxes: [{
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: false
                    }
                }]
            }
        };

        var myChart = new Chart(ctx, {
            options: options,
            data: data,
            type: typeOfChart.toLowerCase()

        });

       
    }


    var resetCanvas = function () {
        $('#chart').remove(); // this is my <canvas> element
        $('#statisticsDiv').append('<canvas id="chart"><canvas>');
        canvas = document.querySelector('#chart');
        ctx = canvas.getContext('2d');
        ctx.canvas.width = $('#graph').width(); // resize to parent width
        ctx.canvas.height = $('#graph').height(); // resize to parent height
        var x = canvas.width / 2;
        var y = canvas.height / 2;
        ctx.font = '10pt Verdana';
        ctx.textAlign = 'center';
        ctx.fillText('This text is centered on the canvas', x, y);
    };

   
</script>


